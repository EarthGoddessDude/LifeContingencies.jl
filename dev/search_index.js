var documenterSearchIndex = {"docs":
[{"location":"#LifeContingencies.jl-1","page":"Home","title":"LifeContingencies.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using LifeContingencies\n    using Dates\nend","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [LifeContingencies]","category":"page"},{"location":"#LifeContingencies.InterestRate","page":"Home","title":"LifeContingencies.InterestRate","text":"InterestRate()\n\nInterestRate is an abstract type that is the parent of various  concrete implementations of interest rate calculations.\n\n\n\n\n\n","category":"type"},{"location":"#LifeContingencies.InterestRate-Tuple{Any}","page":"Home","title":"LifeContingencies.InterestRate","text":"InterestRate(f)\n\nConstruct a FunctionalInterestRate. Assumes that f is a function that takes a given time period and returns the annual effective rate for that period.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.InterestRate-Tuple{Array{Float64,1}}","page":"Home","title":"LifeContingencies.InterestRate","text":"InterestRate(v::Vector{Float64})\n\nConstruct a VectorInterestRate.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.InterestRate-Tuple{Real}","page":"Home","title":"LifeContingencies.InterestRate","text":"InterestRate(i::Real)\n\nConstruct a ConstantInterestRate.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.LifeContingency","page":"Home","title":"LifeContingencies.LifeContingency","text":"struct LifeContingency\n    mort\n    int::InterestRate\n    issue_age::Int\nend\n\nAn object containing the necessary assumptions for basic actuarial calculations such     as commutation functions or life insurance/annuity rates.\n\nExamples\n\nusing MortalityTables\ntbls = MortalityTables.tables()\nmort = tbls[\"2001 VBT Residual Standard Select and Ultimate - Male Nonsmoker, ANB\"]\n\nLifeContingency(\n    mort.select,            # a MortalityTables mortality table\n    InterestRate(0.05),     # interest rate\n    0                       # issue age\n)\n\n\n\n\n\n","category":"type"},{"location":"#LifeContingencies.Ax-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.Ax","text":"Ax(lc::LifeContingency, x) Whole life insurance for someone starting in the xth duration.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.Axn-Tuple{LifeContingency,Any,Any}","page":"Home","title":"LifeContingencies.Axn","text":"Axn(lc::LifeContingency, x, n)\n\nTerm insurance on age x for n years for someone starting in the xth duration.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.Cx-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.Cx","text":"Cx(lc::LifeContingency, duration)\n\nThe C_x actuarial commutation function where the duration argument is x.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.Dx-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.Dx","text":"Dx(lc::LifeContingency, duration)\n\nThe D_x actuarial commutation function where the duration argument is x.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.Mx-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.Mx","text":"Mx(lc::LifeContingency, duration)\n\nThe M_x actuarial commutation function where the duration argument is x.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.Nx-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.Nx","text":"Nx(lc::LifeContingency, duration)\n\nThe N_x actuarial commutation function where the duration argument is x.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.Px-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.Px","text":"Px(lc::LifeContingency,x)\n\nA whole life insurance with 1 unit payable at the end of the year of death, and payable by net annual premiums, starting from time x (often 0).\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.lx-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.lx","text":"lx(lc::LifeContingency, duration)\n\nThe l_x actuarial commutation function where the duration argument is x.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.rate-Tuple{LifeContingencies.ConstantInterestRate,Any}","page":"Home","title":"LifeContingencies.rate","text":"    rate(i::InterestRate,time)\n\nThe interst during time time.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.tVx-Tuple{LifeContingency,Any,Any}","page":"Home","title":"LifeContingencies.tVx","text":"tVx(lc::LifeContingency,x,k)\n\nThe net premium reserve at the end of year t, starting from time x (often 0).\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.tvx","page":"Home","title":"LifeContingencies.tvx","text":"tvx(iv::InterestRate, time1, time2, init = 1.0)\n\nThe discount rate from time1 to time2 with the initial (time zero) discount factor of 1.0. Currently only supports whole years.\n\n\n\n\n\n","category":"function"},{"location":"#LifeContingencies.v-Tuple{InterestRate}","page":"Home","title":"LifeContingencies.v","text":"v(i::InterestRate)\n\nThe discount rate at time 1.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.vx-Tuple{InterestRate,Any}","page":"Home","title":"LifeContingencies.vx","text":"vx(i::InterestRate, time)\n\nThe discount rate at time time.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.äx-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.äx","text":"äx(lc::LifeContingency, x)\n\nLife annuity due for someone starting in the xth duration.\n\nTo enter the ä character, type a and then \\ddot.     See more on how to input unicode     in Julia.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.äxn-Tuple{LifeContingency,Any,Any}","page":"Home","title":"LifeContingencies.äxn","text":"äx(lc::LifeContingency, x,n)\n\nLife annuity due for someone starting in the xth duration for n years.\n\nTo enter the ä character, type a and then \\ddot.     See more on how to input unicode     in Julia.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.ConstantInterestRate","page":"Home","title":"LifeContingencies.ConstantInterestRate","text":"ConstantInterestRate()\n\nConstantInterestRate is a struct with a given rate that will act as the same rate for all periods. Construct by calling InterestRate() with a rate as an argument. \n\nExamples\n\n# 5% interest for all years\nInterestRate()\n\n\n\n\n\n","category":"type"},{"location":"#LifeContingencies.Decrement","page":"Home","title":"LifeContingencies.Decrement","text":"Decrement()\n\nDecrement is an abstract type to be the parent of decrements like mortality, lapse, etc.\n\n\n\n\n\n","category":"type"},{"location":"#LifeContingencies.FunctionalInterestRate","page":"Home","title":"LifeContingencies.FunctionalInterestRate","text":"FunctionalInterestRate()\n\nFunctionalInterestRate is a struct with a rate_function that is a function that takes a time and returns an annual interst rate for that time. Construct by calling     InterestRate() with a function as an argument. \n\nExamples\n\n# simply return 5% always\nInterestRate(time -> 0.05) \n\n# for every period, return a normally distrubted rate\nInterestRate((x -> rand(Normal(0.05, 0.01))))\n\n# an autocorrelated rate\nInterestRate(\n        time -> time <= 1 ? 0.05 : rand(Normal(last(i5.rate_vector), 0.01)),\n    )\n\n\n\n\n\n","category":"type"},{"location":"#LifeContingencies.VectorInterestRate","page":"Home","title":"LifeContingencies.VectorInterestRate","text":"VectorInterestRate()\n\nVectorInterestRate is a struct with a given vector where the element t is the rate at time t. Construct by calling InterestRate() with a vector as an argument. Note that if you provide a short vector, you may inhibit other methods (e.g. commutation/insurance calculations) becuase you haven't  defined interest rates for longer-dated periods.\n\nExamples\n\n# 5% interest for years 1, 2, and 3\nInterestRate([0.05, 0.05, 0.05])\n\n\n\n\n\n","category":"type"},{"location":"#LifeContingencies.omega-Tuple{LifeContingencies.ConstantInterestRate}","page":"Home","title":"LifeContingencies.omega","text":"omega(i::InterestRate)\n\nThe last period that the interest rate is defined for. Assumed to be infinite (Inf) for      functional and constant interest rate types. Returns the lastindex of the vector if      a vector type. Also callable using ω instead of omega.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.ω-Tuple{LifeContingency}","page":"Home","title":"LifeContingencies.ω","text":"ω(lc::LifeContingency)\n\nReturns the last defined period for both the interest rate and mortality table.     In the future, this may only look up the omega of the mortality table.\n\n\n\n\n\n","category":"method"}]
}
