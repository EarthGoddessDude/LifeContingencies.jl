var documenterSearchIndex = {"docs":
[{"location":"#LifeContingencies.jl-1","page":"Home","title":"LifeContingencies.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using LifeContingencies\n    using Dates\nend","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [LifeContingencies]","category":"page"},{"location":"#LifeContingencies.InterestRate","page":"Home","title":"LifeContingencies.InterestRate","text":"InterestRate()\n\nInterestRate is an abstract type that is the parent of various  concrete implementations of interest rate calculations.\n\n\n\n\n\n","category":"type"},{"location":"#LifeContingencies.InterestRate-Tuple{Any}","page":"Home","title":"LifeContingencies.InterestRate","text":"InterestRate(f)\n\nConstruct a FunctionalInterestRate. Assumes that f is a function that takes a given time period and returns the annual effective rate for that period.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.InterestRate-Tuple{Array{Float64,1}}","page":"Home","title":"LifeContingencies.InterestRate","text":"InterestRate(v::Vector{Float64})\n\nConstruct a VectorInterestRate.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.InterestRate-Tuple{Real}","page":"Home","title":"LifeContingencies.InterestRate","text":"InterestRate(i::Real)\n\nConstruct a ConstantInterestRate.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.A-Tuple{LifeContingency,Any,Any}","page":"Home","title":"LifeContingencies.A","text":"A(lc::LifeContingency, duration, time)\n\nTerm insurance for n years for someone starting in the xth duration. Issue age is based on the issue_age in the LifeContingency lc.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.A-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.A","text":"A(lc::LifeContingency, duration)\n\nWhole life insurance for someone starting in the xth duration. Issue age is based on the issue_age in the LifeContingency lc.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.C-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.C","text":"C(lc::LifeContingency, duration)\n\nThe C_x actuarial commutation function where the duration argument is x. Issue age is based on the issue_age in the LifeContingency lc.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.D-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.D","text":"D(lc::LifeContingency, time)\n\nThe D_x actuarial commutation function where the time argument is x. Issue age is based on the issue_age in the LifeContingency lc.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.M-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.M","text":"M(lc::LifeContingency, duration)\n\nThe M_x actuarial commutation function where the duration argument is x. Issue age is based on the issue_age in the LifeContingency lc.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.N-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.N","text":"N(lc::LifeContingency, duration)\n\nThe N_x actuarial commutation function where the duration argument is x. Issue age is based on the issue_age in the LifeContingency lc.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.P","page":"Home","title":"LifeContingencies.P","text":"P(lc::LifeContingency,start_time=0)\n\nA whole life insurance with 1 unit payable at the end of the year of death, and payable by net annual premiums, starting from start_time timepoint (often 0).\n\n\n\n\n\n","category":"function"},{"location":"#LifeContingencies.V","page":"Home","title":"LifeContingencies.V","text":"V(lc::LifeContingency,t,start_time=0)\n\nThe net premium reserve at the end of year t, starting from time start_time (often 0).\n\n\n\n\n\n","category":"function"},{"location":"#LifeContingencies.l-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.l","text":"l(lc::LifeContingency, time)\n\nThe l_x actuarial commutation function where the time argument is x. Issue age is based on the issue_age in the LifeContingency lc.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.rate-Tuple{LifeContingencies.ConstantInterestRate,Any}","page":"Home","title":"LifeContingencies.rate","text":"    rate(i::InterestRate,time)\n\nThe interst during time time.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.v-Tuple{InterestRate,Any,Any}","page":"Home","title":"LifeContingencies.v","text":"v(i::InterestRate, from_period, to_period)\nv(i::InterestRate, period)\n\nThe three argument method returns the discount factor applicable between period from_period and to_period given InterestRate i. The two argument method returns the discount factor from period zero to period given InterestRate i.\n\nExamples\n\njulia> i = InterestRate(0.05)\njulia> v(i,1)\n0.9523809523809523\njulia> v.(i,1:5)\n5-element Array{Float64,1}:\n 0.9523809523809523\n 0.9070294784580498\n 0.863837598531476\n 0.8227024747918819\n 0.7835261664684589\n julia> v(i,1,3)\n0.9070294784580498\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.v-Tuple{InterestRate,Any}","page":"Home","title":"LifeContingencies.v","text":"v(i::InterestRate, period)\n\nThe discount rate at period period.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.ä-Tuple{LifeContingency,Any,Any}","page":"Home","title":"LifeContingencies.ä","text":"ä(lc::LifeContingency, duration,time)\n\nLife annuity due for someone starting in the xth duration for time years.\n\nTo enter the ä character, type a and then \\ddot.     See more on how to input unicode     in Julia.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.ä-Tuple{LifeContingency,Any}","page":"Home","title":"LifeContingencies.ä","text":"ä(lc::LifeContingency, duration)\n\nLife annuity due for someone starting in the their xth duration. Issue age is based on the issue_age in the LifeContingency lc.\n\nTo enter the ä character, type a and then \\ddot.     See more on how to input unicode     in Julia.\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.omega-Tuple{LifeContingencies.ConstantInterestRate}","page":"Home","title":"MortalityTables.omega","text":"omega(i::InterestRate)\n\nThe last period that the interest rate is defined for. Assumed to be infinite (Inf) for      functional and constant interest rate types. Returns the lastindex of the vector if      a vector type. Also callable using ω instead of omega.\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.p","page":"Home","title":"MortalityTables.p","text":"p(lc::LifeContingency,duration,time=1)\np(lc::LifeContingency,duration)\n\nReturn the probablity of survival for the given LifeContingency. \n\n\n\n\n\n","category":"function"},{"location":"#MortalityTables.q","page":"Home","title":"MortalityTables.q","text":"q(lc::LifeContingency,duration,time=1)\nq(lc::LifeContingency,duration,time=1)\n\nReturn the probablity of death for the given LifeContingency. \n\n\n\n\n\n","category":"function"},{"location":"#MortalityTables.ω-Tuple{LifeContingency}","page":"Home","title":"MortalityTables.ω","text":"ω(lc::LifeContingency)\n\nReturns the last defined period for both the interest rate and mortality table.     In the future, this may only look up the omega of the mortality table.\n\n\n\n\n\n","category":"method"},{"location":"#LifeContingencies.ConstantInterestRate","page":"Home","title":"LifeContingencies.ConstantInterestRate","text":"ConstantInterestRate()\n\nConstantInterestRate is a struct with a given rate that will act as the same rate for all periods. Construct by calling InterestRate() with a rate as an argument. \n\nExamples\n\n# 5% interest for all years\nInterestRate()\n\n\n\n\n\n","category":"type"},{"location":"#LifeContingencies.Decrement","page":"Home","title":"LifeContingencies.Decrement","text":"Decrement()\n\nDecrement is an abstract type to be the parent of decrements like mortality, lapse, etc.\n\n\n\n\n\n","category":"type"},{"location":"#LifeContingencies.FunctionalInterestRate","page":"Home","title":"LifeContingencies.FunctionalInterestRate","text":"FunctionalInterestRate()\n\nFunctionalInterestRate is a struct with a rate_function that is a function that takes a time and returns an annual interst rate for that time. Construct by calling     InterestRate() with a function as an argument. \n\nExamples\n\n# simply return 5% always\nInterestRate(time -> 0.05) \n\n# for every period, return a normally distrubted rate\nInterestRate((x -> rand(Normal(0.05, 0.01))))\n\n# an autocorrelated rate\nInterestRate(\n        time -> time <= 1 ? 0.05 : rand(Normal(last(i5.rate_vector), 0.01)),\n    )\n\n\n\n\n\n","category":"type"},{"location":"#LifeContingencies.VectorInterestRate","page":"Home","title":"LifeContingencies.VectorInterestRate","text":"VectorInterestRate()\n\nVectorInterestRate is a struct with a given vector where the element t is the rate at time t. Construct by calling InterestRate() with a vector as an argument. Note that if you provide a short vector, you may inhibit other methods (e.g. commutation/insurance calculations) becuase you haven't  defined interest rates for longer-dated periods.\n\nExamples\n\n# 5% interest for years 1, 2, and 3\nInterestRate([0.05, 0.05, 0.05])\n\n\n\n\n\n","category":"type"}]
}
